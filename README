Intro:

  'observable' is a HEADER ONLY C++ implementation of observer design pattern.
  It provides a generic observable subject that enables users to decouple 
  callback interfaces from their concrete subjects. Such idea is mainly 
  inspired by an article written by Herb Sutter that appered in Dr. Dobb's, 
  2003 [link](http://drdobbs.com/184403873).

Requirement:

  boost 1.50+
  compilers support C++11

Example:

  observ.cpp

Trace notifications:
  
  Define 'OBSERVER_ENABLE_TRACKING' before include observable.hpp to enable tracing mode.

  To obtain meaningful tracking message, clients' subject class have to add a defined macro. i.e.

  class subject 
  : observable<void()>
  {
    OBSERVER_INSTALL_LOG_REQUIRED_INTERFACE_

    subject();
    // ...
  };

  Besides, two macros are required to be installed to clients' observer, i.e.

  class observer
  {
    void on_notified()
    {
      // Member function observer
      OBSERVER_TRACKING_OBSERVER_MEM_FN_INVOKED;
    }
  };

  void on_notified()
  {
    OBSERVER_TRACKING_OBSERVER_FN_INVOKED;
  }
  
  The first macro add a virtual function to obtain name of the most derived class. That is,
  a subject class.

  Last two macors are used to obtain function name (via __FUNCTION__)
  If there are other tricks to do this without insertion of clients' code, 
  please let me know.

  By default, tracking messages are outputed to std::cin. One can configure other
  std::ostream to change such default behavior like this:

  std::stringstream log;
  logger::singleton().set(log);
  logger::singleton().start();  // Optionally. You can call this method whenever you 
                                // like to reset start time.

  Here are log messages of compiled 'observ.cpp'.

  @obs: [0.000] "mySubject" -- "simple_observer::on_meta" [1.000];
  @obs: [1.000] "mySubject" -- free_function" [1.000];
  @obs: [1.000] "mySubject" -- "simple_observer::on_meta" [2.001];
  @obs: [2.001] "mySubject" -- "simple_observer::on_void" [2.001];
  @obs: [2.001] "derivedSubject" -- "simple_observer::on_meta" [3.001];
  @obs: [3.001] "mySubject" -- "simple_observer::on_named" [3.001];
  
  The format is as follows:
  
  @obs: [n.m] X -- Y [p.q] ;

  @obs    For identify log message.
  [n.m]   Timestamp(seconds) of entering X. It's clocked since "starting of a logger".
  X -- Y  Subject X notify observer Y. 
  [p.q]   Timestamp of leaving Y.

Contributors:

  bind_weak_ptr: Alexander Kuzmenko and Dmytro Gokun.

