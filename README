Intro:

  'observable' is a HEADER ONLY C++ implementation of observer design pattern.
  It provides a generic observable subject that enables users decouple 
  callback interfaces from their concrete subjects. Such idea is mainly 
  inspired by an article written by Herb Sutter that appered in Dr. Dobb's, 
  2003 [link](http://drdobbs.com/184403873).

Requirement:

  boost 1.45+

Example:

  observ.cpp

Trace notifications:

  Define 'TRACE_NOTIFICATION_' when compiling your code to enable tracing mode.

    e.g. g++ [-I/usr/local/include] -DTRACE_NOTIFICATION_ observ.cpp
  
  Then you can get messages from stdout whenever a notification is made. The 
  observable class internally uses typeid to print name of a tag type. Thus, to
  use the tracing facility, one has to make the tag type as a complete type. 
  That is,

    struct meta{}; // OK, complete tag type.
    typedef observable<void(), meta> meta_observable;
    
    struct input; // Incomplete tag type, OK for non tracing mode
                  // but compile error in tracing enabled mode.

  Besides, you may need a tool to translate the names outputed in tracing mode 
  due to the naming convension among compilers. In case of GNU C++ compiler,
  one can use 'c++filt' to achive this.

  e.g. 
  
    ./your_prog
    4meta: FvRKSsE is notified

    ./your_prog | c++filt
    meta: void ()(std::string const&) is notified

Contributors:

  bind_weak_ptr: Alexander Kuzmenko and Dmytro Gokun.

